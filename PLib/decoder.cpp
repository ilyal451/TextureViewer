/*
PLib (Pixel Library), part of the Texture Viewer project
http://imagetools.itch.io/texview
Copyright (c) 2013-2024 Ilya Lyutin

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

#include <windows.h>

#include "../shared/plibclient.h"


#define DEFINE_DECODER(name) \
	unsigned int PLIB_Decode##name( void* pOut, void* pIn, int iWidth, int iHeight, int iPitch, void* pPal )

extern "C" {

DEFINE_DECODER( R8 );
DEFINE_DECODER( R8G8 );
DEFINE_DECODER( G8R8 );
DEFINE_DECODER( R8G8B8 );
DEFINE_DECODER( B8G8R8 );
DEFINE_DECODER( R8G8B8X8 );
DEFINE_DECODER( B8G8R8X8 );
DEFINE_DECODER( X8X8X8A8 );
DEFINE_DECODER( R8G8B8A8 );
DEFINE_DECODER( B8G8R8A8 );
DEFINE_DECODER( R16 );
DEFINE_DECODER( R16G16 );
DEFINE_DECODER( G16R16 );
DEFINE_DECODER( R16G16B16 );
DEFINE_DECODER( B16G16R16 );
DEFINE_DECODER( R16G16B16X16 );
DEFINE_DECODER( B16G16R16X16 );
DEFINE_DECODER( X16X16X16A16 );
DEFINE_DECODER( R16G16B16A16 );
DEFINE_DECODER( B16G16R16A16 );
DEFINE_DECODER( R32 );
DEFINE_DECODER( R32G32 );
DEFINE_DECODER( G32R32 );
DEFINE_DECODER( R32G32B32 );
DEFINE_DECODER( B32G32R32 );
DEFINE_DECODER( R32G32B32X32 );
DEFINE_DECODER( B32G32R32X32 );
DEFINE_DECODER( X32X32X32A32 );
DEFINE_DECODER( R32G32B32A32 );
DEFINE_DECODER( B32G32R32A32 );

DEFINE_DECODER( R8G8B8_UNORM );
DEFINE_DECODER( B8G8R8_UNORM );
DEFINE_DECODER( R8G8B8X8_UNORM );
DEFINE_DECODER( B8G8R8X8_UNORM );
DEFINE_DECODER( R8G8B8A8_UNORM );
DEFINE_DECODER( B8G8R8A8_UNORM );

DEFINE_DECODER( R3G3B2_UNORM );
DEFINE_DECODER( B2G3R3_UNORM );
DEFINE_DECODER( R3G3B2A8_UNORM );
DEFINE_DECODER( B2G3R3A8_UNORM );
DEFINE_DECODER( R4G4B4X4_UNORM );
DEFINE_DECODER( B4G4R4X4_UNORM );
DEFINE_DECODER( R4G4B4A4_UNORM );
DEFINE_DECODER( B4G4R4A4_UNORM );
DEFINE_DECODER( R5G6B5_UNORM );
DEFINE_DECODER( B5G6R5_UNORM );
DEFINE_DECODER( R5G5B5X1_UNORM );
DEFINE_DECODER( B5G5R5X1_UNORM );
DEFINE_DECODER( R5G5B5A1_UNORM );
DEFINE_DECODER( B5G5R5A1_UNORM );
DEFINE_DECODER( R10G10B10X2_UNORM );
DEFINE_DECODER( B10G10R10X2_UNORM );
DEFINE_DECODER( X10X10X10A2_UNORM );
DEFINE_DECODER( R10G10B10A2_UNORM );
DEFINE_DECODER( B10G10R10A2_UNORM );

DEFINE_DECODER( U10V10W10X2 );
DEFINE_DECODER( W10V10U10X2 );

DEFINE_DECODER( R10G10B10A2_UINT );
DEFINE_DECODER( R10G10B10X2_XR_BIAS );

DEFINE_DECODER( R9G9B9E5_FLOAT );
DEFINE_DECODER( R11G11B10_FLOAT );
DEFINE_DECODER( B10G11R11_FLOAT );

DEFINE_DECODER( U8V8CX );
DEFINE_DECODER( U5V5X6 );
DEFINE_DECODER( X5X5L6 );
DEFINE_DECODER( U8V8X8X8 );
DEFINE_DECODER( X8X8L8X8 );

DEFINE_DECODER( D24X8 );
DEFINE_DECODER( X24S8 );
DEFINE_DECODER( D15X1 );
DEFINE_DECODER( X15S1 );
DEFINE_DECODER( D32X8X24 );
DEFINE_DECODER( X32S8X24 );

DEFINE_DECODER( L1M );
DEFINE_DECODER( L2M );
DEFINE_DECODER( L4M );
DEFINE_DECODER( L1L );
DEFINE_DECODER( L2L );
DEFINE_DECODER( L4L );
DEFINE_DECODER( P1M );
DEFINE_DECODER( P2M );
DEFINE_DECODER( P4M );
DEFINE_DECODER( P1L );
DEFINE_DECODER( P2L );
DEFINE_DECODER( P4L );

DEFINE_DECODER( L4A4 );
DEFINE_DECODER( P4X4 );
DEFINE_DECODER( X4A4 );
DEFINE_DECODER( L8A8 );
DEFINE_DECODER( P8X8 );
DEFINE_DECODER( X8A8 );
DEFINE_DECODER( L16A16 );

DEFINE_DECODER( L8 );
DEFINE_DECODER( L16 );
DEFINE_DECODER( L32 );
DEFINE_DECODER( P8 );
DEFINE_DECODER( P16 );
DEFINE_DECODER( P32 );

DEFINE_DECODER( A8 );
DEFINE_DECODER( A16 );
DEFINE_DECODER( A32 );

DEFINE_DECODER( RGBG );
DEFINE_DECODER( GRGB );
DEFINE_DECODER( YUY2 );
DEFINE_DECODER( UYVY );

DEFINE_DECODER( BC1 );
DEFINE_DECODER( BC2 );
DEFINE_DECODER( BC3 );
DEFINE_DECODER( BC4_UNORM );
DEFINE_DECODER( BC4_SNORM );
DEFINE_DECODER( BC5_UNORM );
DEFINE_DECODER( BC5_SNORM );
DEFINE_DECODER( BC6H_UF16 );
DEFINE_DECODER( BC6H_SF16 );
DEFINE_DECODER( BC7 );


}





typedef unsigned int ( *PFNDECODEPIXELS )( void* pOut, void* pIn, int iWidth, int iHeight, int iPitch, void* pPal );
PFNDECODEPIXELS g_apfnDecodePixels[NUM_INPUT_PIXEL_FORMATS];
typedef struct DecoderOutputInfo_s
{
	int nBytesOut;
	int ePixelFormat;
	int eChannelLayout;
	int iComponentSize;
	int eDataFormat;
} DecoderOutputInfo_t;
DecoderOutputInfo_t g_gasDecoderOutputInfo[NUM_INPUT_PIXEL_FORMATS];

#define SET_DECODER(name, pf, layout, size, type) \
	g_apfnDecodePixels[IN_##name] = PLIB_Decode##name; \
	g_gasDecoderOutputInfo[IN_##name].nBytesOut = 0; \
	g_gasDecoderOutputInfo[IN_##name].ePixelFormat = pf; \
	g_gasDecoderOutputInfo[IN_##name].eChannelLayout = layout; \
	g_gasDecoderOutputInfo[IN_##name].iComponentSize = size; \
	g_gasDecoderOutputInfo[IN_##name].eDataFormat = type;


void _PLIB_InitDecoder( void )
{
	SET_DECODER( R8,					-1, CL_R,		CS_8BIT, -1 );
	SET_DECODER( R8G8,					-1, CL_RG,		CS_8BIT, -1 );
	SET_DECODER( G8R8,					-1, CL_RG,		CS_8BIT, -1 );
	SET_DECODER( R8G8B8,				-1, CL_RGB,		CS_8BIT, -1 );
	SET_DECODER( B8G8R8,				-1, CL_RGB,		CS_8BIT, -1 );
	SET_DECODER( R8G8B8X8,				-1, CL_RGB,		CS_8BIT, -1 );
	SET_DECODER( B8G8R8X8,				-1, CL_RGB,		CS_8BIT, -1 );
	SET_DECODER( X8X8X8A8,				-1, CL_A,		CS_8BIT, -1 );
	SET_DECODER( R8G8B8A8,				-1, CL_RGBA,	CS_8BIT, -1 );
	SET_DECODER( B8G8R8A8,				-1, CL_RGBA,	CS_8BIT, -1 );
	SET_DECODER( R16,					-1, CL_R,		CS_16BIT, -1 );
	SET_DECODER( R16G16,				-1, CL_RG,		CS_16BIT, -1 );
	SET_DECODER( G16R16,				-1, CL_RG,		CS_16BIT, -1 );
	SET_DECODER( R16G16B16,				-1, CL_RGB,		CS_16BIT, -1 );
	SET_DECODER( B16G16R16,				-1, CL_RGB,		CS_16BIT, -1 );
	SET_DECODER( R16G16B16X16,			-1, CL_RGB,		CS_16BIT, -1 );
	SET_DECODER( B16G16R16X16,			-1, CL_RGB,		CS_16BIT, -1 );
	SET_DECODER( X16X16X16A16,			-1, CL_A,		CS_16BIT, -1 );
	SET_DECODER( R16G16B16A16,			-1, CL_RGBA,	CS_16BIT, -1 );
	SET_DECODER( B16G16R16A16,			-1, CL_RGBA,	CS_16BIT, -1 );
	SET_DECODER( R32,					-1, CL_R,		CS_32BIT, -1 );
	SET_DECODER( R32G32,				-1, CL_RG,		CS_32BIT, -1 );
	SET_DECODER( G32R32,				-1, CL_RG,		CS_32BIT, -1 );
	SET_DECODER( R32G32B32,				-1, CL_RGB,		CS_32BIT, -1 );
	SET_DECODER( B32G32R32,				-1, CL_RGB,		CS_32BIT, -1 );
	SET_DECODER( R32G32B32X32,			-1, CL_RGB,		CS_32BIT, -1 );
	SET_DECODER( B32G32R32X32,			-1, CL_RGB,		CS_32BIT, -1 );
	SET_DECODER( X32X32X32A32,			-1, CL_A,		CS_32BIT, -1 );
	SET_DECODER( R32G32B32A32,			-1, CL_RGBA,	CS_32BIT, -1 );
	SET_DECODER( B32G32R32A32,			-1, CL_RGBA,	CS_32BIT, -1 );

	SET_DECODER( R8G8B8_UNORM,			PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );
	SET_DECODER( B8G8R8_UNORM,			PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );
	SET_DECODER( R8G8B8X8_UNORM,		PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );
	SET_DECODER( B8G8R8X8_UNORM,		PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );
	SET_DECODER( R8G8B8A8_UNORM,		PF_B8G8R8A8_UNORM, CL_BGRA,	CS_8BIT, CT_UNORM );
	SET_DECODER( B8G8R8A8_UNORM,		PF_B8G8R8A8_UNORM, CL_BGRA,	CS_8BIT, CT_UNORM );

	SET_DECODER( R3G3B2_UNORM,			PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );
	SET_DECODER( B2G3R3_UNORM,			PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );
	SET_DECODER( R3G3B2A8_UNORM,		PF_B8G8R8A8_UNORM, CL_BGRA,	CS_8BIT, CT_UNORM );
	SET_DECODER( B2G3R3A8_UNORM,		PF_B8G8R8A8_UNORM, CL_BGRA,	CS_8BIT, CT_UNORM );
	SET_DECODER( R4G4B4X4_UNORM,		PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );
	SET_DECODER( B4G4R4X4_UNORM,		PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );
	SET_DECODER( R4G4B4A4_UNORM,		PF_B8G8R8A8_UNORM, CL_BGRA,	CS_8BIT, CT_UNORM );
	SET_DECODER( B4G4R4A4_UNORM,		PF_B8G8R8A8_UNORM, CL_BGRA,	CS_8BIT, CT_UNORM );
	SET_DECODER( R5G6B5_UNORM,			PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );
	SET_DECODER( B5G6R5_UNORM,			PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );
	SET_DECODER( R5G5B5X1_UNORM,		PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );
	SET_DECODER( B5G5R5X1_UNORM,		PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );
	SET_DECODER( R5G5B5A1_UNORM,		PF_B8G8R8A8_UNORM, CL_BGRA,	CS_8BIT, CT_UNORM );
	SET_DECODER( B5G5R5A1_UNORM,		PF_B8G8R8A8_UNORM, CL_BGRA,	CS_8BIT, CT_UNORM );
	SET_DECODER( R10G10B10X2_UNORM,		-1, CL_RGB,		CS_16BIT, CT_UNORM );
	SET_DECODER( B10G10R10X2_UNORM,		-1, CL_RGB,		CS_16BIT, CT_UNORM );
	SET_DECODER( X10X10X10A2_UNORM,		-1, CL_A,		CS_8BIT, CT_UNORM );
	SET_DECODER( R10G10B10A2_UNORM,		-1, CL_RGBA,	CS_16BIT, CT_UNORM );
	SET_DECODER( B10G10R10A2_UNORM,		-1, CL_RGBA,	CS_16BIT, CT_UNORM );
 
	SET_DECODER( U10V10W10X2,			-1, CL_RGB,		CS_16BIT, CT_SNORM );
	SET_DECODER( W10V10U10X2,			-1, CL_RGB,		CS_16BIT, CT_SNORM );

	SET_DECODER( R10G10B10A2_UINT,		-1, CL_RGBA,	CS_16BIT, CT_UINT );
	SET_DECODER( R10G10B10X2_XR_BIAS,	-1, CL_RGB,		CS_16BIT, CT_FLOAT );

	SET_DECODER( R9G9B9E5_FLOAT,		-1, CL_RGB,		CS_32BIT, CT_FLOAT );
	SET_DECODER( R11G11B10_FLOAT,		-1, CL_RGB,		CS_16BIT, CT_FLOAT );
	SET_DECODER( B10G11R11_FLOAT,		-1, CL_RGB,		CS_16BIT, CT_FLOAT );
 
	SET_DECODER( U8V8CX,				-1, CL_RG,		CS_8BIT, CT_SNORM );
	SET_DECODER( U5V5X6,				-1, CL_RG,		CS_8BIT, CT_SNORM );
	SET_DECODER( X5X5L6,				-1, CL_A,		CS_8BIT, CT_UNORM );
	SET_DECODER( U8V8X8X8,				-1, CL_RG,		CS_8BIT, CT_SNORM );
	SET_DECODER( X8X8L8X8,				-1, CL_A,		CS_8BIT, CT_UNORM );

	SET_DECODER( D24X8,					-1, CL_L,		CS_32BIT, CT_UNORM );
	SET_DECODER( X24S8,					-1, CL_A,		CS_8BIT, CT_UINT );
	SET_DECODER( D15X1,					-1, CL_L,		CS_16BIT, CT_UNORM );
	SET_DECODER( X15S1,					-1, CL_A,		CS_8BIT, CT_UINT );
	SET_DECODER( D32X8X24,				-1, CL_L,		CS_32BIT, CT_UNORM );
	SET_DECODER( X32S8X24,				-1, CL_A,		CS_8BIT, CT_UINT );

	SET_DECODER( L1M,					-1, CL_L,		CS_8BIT, CT_UNORM );
	SET_DECODER( L2M,					-1, CL_L,		CS_8BIT, CT_UNORM );
	SET_DECODER( L4M,					-1, CL_L,		CS_8BIT, CT_UNORM );
	SET_DECODER( L1L,					-1, CL_L,		CS_8BIT, CT_UNORM );
	SET_DECODER( L2L,					-1, CL_L,		CS_8BIT, CT_UNORM );
	SET_DECODER( L4L,					-1, CL_L,		CS_8BIT, CT_UNORM );
	SET_DECODER( P1M,					-1, CL_P,		CS_8BIT, CT_UINT );
	SET_DECODER( P2M,					-1, CL_P,		CS_8BIT, CT_UINT );
	SET_DECODER( P4M,					-1, CL_P,		CS_8BIT, CT_UINT );
	SET_DECODER( P1L,					-1, CL_P,		CS_8BIT, CT_UINT );
	SET_DECODER( P2L,					-1, CL_P,		CS_8BIT, CT_UINT );
	SET_DECODER( P4L,					-1, CL_P,		CS_8BIT, CT_UINT );

	SET_DECODER( L4A4,					-1, CL_LA,		CS_8BIT, CT_UNORM );
	SET_DECODER( P4X4,					-1, CL_P,		CS_8BIT, CT_UINT );
	SET_DECODER( X4A4,					-1, CL_A,		CS_8BIT, CT_UNORM );
	SET_DECODER( L8A8,					-1, CL_LA,		CS_8BIT, CT_UNORM );
	SET_DECODER( P8X8,					-1, CL_P,		CS_8BIT, CT_UINT );
	SET_DECODER( X8A8,					-1, CL_A,		CS_8BIT, CT_UNORM );
	SET_DECODER( L16A16,				-1, CL_LA,		CS_16BIT, CT_UNORM );

	SET_DECODER( L8,					-1, CL_L,		CS_8BIT, CT_UNORM );
	SET_DECODER( L16,					-1, CL_L,		CS_16BIT, CT_UNORM );
	SET_DECODER( L32,					-1, CL_L,		CS_32BIT, CT_UNORM );
	SET_DECODER( P8,					-1, CL_P,		CS_8BIT, CT_UINT );
	SET_DECODER( P16,					-1, CL_P,		CS_16BIT, CT_UINT );
	SET_DECODER( P32,					-1, CL_P,		CS_32BIT, CT_UINT );

	SET_DECODER( A8,					-1, CL_A,		CS_8BIT, CT_UNORM );
	SET_DECODER( A16,					-1, CL_A,		CS_16BIT, CT_UNORM );
	SET_DECODER( A32,					-1, CL_A,		CS_32BIT, CT_UNORM );

	SET_DECODER( RGBG,					PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );
	SET_DECODER( GRGB,					PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );
	SET_DECODER( YUY2,					PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );
	SET_DECODER( UYVY,					PF_B8G8R8X8_UNORM, CL_BGRX,	CS_8BIT, CT_UNORM );

	SET_DECODER( BC1,					PF_B8G8R8A8_UNORM, CL_BGRA,	CS_8BIT, CT_UNORM );
	SET_DECODER( BC2,					PF_B8G8R8A8_UNORM, CL_BGRA,	CS_8BIT, CT_UNORM );
	SET_DECODER( BC3,					PF_B8G8R8A8_UNORM, CL_BGRA,	CS_8BIT, CT_UNORM );
	SET_DECODER( BC4_UNORM,				-1, CL_R,		CS_8BIT, CT_UNORM );
	SET_DECODER( BC4_SNORM,				-1, CL_R,		CS_8BIT, CT_SNORM );
	SET_DECODER( BC5_UNORM,				-1, CL_RG,		CS_8BIT, CT_UNORM );
	SET_DECODER( BC5_SNORM,				-1, CL_RG,		CS_8BIT, CT_SNORM );
	SET_DECODER( BC6H_UF16,				-1, CL_RGB,		CS_16BIT, CT_FLOAT );
	SET_DECODER( BC6H_SF16,				-1, CL_RGB,		CS_16BIT, CT_FLOAT );
	SET_DECODER( BC7,					PF_B8G8R8A8_UNORM, CL_BGRA,	CS_8BIT, CT_UNORM );

	// check it
	for ( int i = 0; i < NUM_INPUT_PIXEL_FORMATS; i++ )
	{
		if ( g_apfnDecodePixels[i] == NULL )
			__asm int 3;
	}
}


PFNDECODEPIXELS PLIB_GetDecoder( int eInPixelFormat )
{
	return g_apfnDecodePixels[eInPixelFormat];
}


unsigned int PLIB_DecodePixels( int eInPixelFormat, void* pOut, void* pIn, int iWidth, int iHeight, int iPitch )
{
	return g_apfnDecodePixels[eInPixelFormat]( pOut, pIn, iWidth, iHeight, iPitch, NULL );
}


int PLIB_GetOutputFormat( int eInPixelFormat, PixelFormat_t* ppf )
{
	DecoderOutputInfo_t* pi = &g_gasDecoderOutputInfo[eInPixelFormat];

	ppf->ePixelFormat = pi->ePixelFormat;
	ppf->eChannelLayout = pi->eChannelLayout;
	ppf->iComponentSize = pi->iComponentSize;
	ppf->eDataFormat = pi->eDataFormat;

	return 1;
}


unsigned int PLIB_GetInputSize( int eInPixelFormat, int iWidth, int iHeight, int iPitch )
{
	return PLIB_DecodePixels( eInPixelFormat, NULL, NULL, iWidth, iHeight, iPitch );
}


int PLIB_GetWidthGranularity( int eInPixelFormat )
{
	return PLIB_DecodePixels( eInPixelFormat, NULL, NULL, 0, -1, 0 );
}


int PLIB_GetHeightGranularity( int eInPixelFormat )
{
	return PLIB_DecodePixels( eInPixelFormat, NULL, NULL, -1, 0, 0 );
}


int PLIB_GetPixelSize( PixelFormat_t* ppf );


PLibClientFuncs_t g_clientFuncs =
{
	PLIB_DecodePixels,
	PLIB_GetInputSize,
	PLIB_GetPixelSize,
	PLIB_GetWidthGranularity,
	PLIB_GetHeightGranularity,
	PLIB_GetOutputFormat,
};



